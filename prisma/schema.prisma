// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  HIRER
}

enum WorkStatus {
  AVAILABLE
  BUSY
  HIRER
}

model User {
  id               String      @id @unique @default(uuid())
  email            String      @unique
  username         String      @unique
  password         String
  name             String      @default("")
  profilePicture   String      @default("")
  profilePictureId String      @default("")
  workStatus       WorkStatus  @default(AVAILABLE)
  jobRole          String      @default("")
  bio              String      @default("")
  role             Role        @default(USER)
  profile          Profile?
  hasSkills        Skill[]
  skillsInfo       UserSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id String @id @unique @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  about       String       @default("")
  education   Education[]
  courses     Course[]
  experiences Experience[]
}

model Skill {
  id String @id @unique @default(uuid())

  user User[]

  title String
  slug  String @unique
}

model UserSkill {
  id String @id @unique @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  title          String?
  slug           String?
  isTopSkill     Boolean?
  isVarified     Boolean?
  totalMark      String?
  lastExamDate   String?
  examPassedDate String?
}

model Experience {
  id String @id @unique @default(uuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  companyName String?
  jobPosition String?
  description String?
  startDate   String?
  finishDate  String?
}

model Education {
  id String @id @unique @default(uuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  institutionName String?
  degree          String?
  fieldOfStudy    String?
  gpa             String?
  maxGpa          String?
  startDate       String?
  finishDate      String?
}

model Course {
  id String @id @unique @default(uuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  institutionName String?
  courseName      String?
  certificateLink String?
  startDate       String?
  finishDate      String?
}
